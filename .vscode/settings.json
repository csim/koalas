{
  "subtleBrackets.style": {
    "borderWidth": "1px",
    "borderStyle": "none none solid none"
  },
  "editorconfig.generateAuto": false,
  "dotnet.completion.showCompletionItemsFromUnimportedNamespaces": true,
  "files.associations": {
    ".editorconfig": "ini"
  },
  "csharpen.regionalizeInterfaceImplementations": [],
  "csharpen.namespaceLevelOrganization": {
    "ordering": [
      "type",
      "access",
      "name"
    ],
    "typeSort": [
      "delegate",
      "interface",
      "class",
      "enum",
      "struct",
      "record",
      "record struct"
    ],
    "regionalization": [],
    "regionThreshold": 5000,
    "doNotRegionalizeMembersOf": [
      "interface",
      "class",
      "struct",
      "record",
      "record struct"
    ],
    "onlyRegionalizeTypes": []
  },
  "csharpen.allowSharpenWithFileDiagnosticErrors": true,
  "csharpen.typeLevelOrganization": {
    "doNotRegionalizeTypes": [
      "delegate",
      "event",
      "constant",
      "property",
      "field",
      "static constructor",
      "constructor",
      "indexer",
      "finalizer",
      "method",
      "operator",
      "interface",
      "class",
      "enum",
      "struct",
      "record",
      "record struct"
    ],
    "ordering": [
      "type",
      "access",
      "name"
    ],
    "typeSort": [
      "delegate",
      "event",
      "constant",
      "property",
      "field",
      "static constructor",
      "constructor",
      "indexer",
      "finalizer",
      "method",
      "operator",
      "interface",
      "class",
      "enum",
      "struct",
      "record",
      "record struct"
    ],
    "regionalization": [
      "type"
    ],
    "regionThreshold": 500,
    "doNotRegionalizeMembersOf": [
      "interface"
    ],
    "onlyRegionalizeMembersOf": [
      "class"
    ],
    "onlyRegionalizeTypes": [
      "property",
      "field",
      "constant",
      "method"
    ]
  },
  "csharpen.codingStylesEnabled": true,
  "csharpen.symbolRenaming": [
    {
      "name": "AsyncMethodSuffix",
      "replacement": "{name}Async",
      "memberModifiers": "async",
      "namePattern": "^(?<name>[a-zA-Z][a-zA-Z0-9_]+(?<!Async))$",
      "returnTypePattern": "^(Value)?Task(<.*>)?$",
      "types": "method"
    },
    {
      "name": "InterfaceFormat",
      "replacement": "I{name:0-1:upper}{name:1}",
      "namePattern": "^(?<name>[^I][a-zA-Z0-9_]+)$",
      "types": "interface"
    },
    {
      "name": "PrivateConstOrFieldFormat",
      "replacement": "_{name:0-1:lower}{name:1}",
      "namePattern": "^(?<name>[a-zA-Z][a-zA-Z0-9_]+)$",
      "types": "constant,field",
      "accessModifiers": "private protected,private"
    },
    {
      "name": "NonPrivateMemberFormat",
      "replacement": "{name:0-1:upper}{name:1}",
      "namePattern": "^_*(?<name>[a-z][a-zA-Z0-9_]+)$",
      "types": "constant,field,method,property,enum,event,delegate",
      "accessModifiers": "!:private protected,private"
    }
  ],
  "csharpen.codingStyles": {
    "useLanguageKeywordsInsteadOfFrameworkTypes": true,
    "convertNonPrivateFieldsToProperties": true,
    "preserveNullableDirectives": true
  },
  "csharpen.symbolRenamingEnabled": true,
  "csharpen.sharpenFilesWhenRemovingUnusedReferences": true,
  "csharpen.performQuickFixesOnSharpen": true,
  "csharpen.showFileSizeDifferenceOnSharpen": false,
  "csharpier.enableDebugLogs": false,
  "csharpen.quickFixFilters": [
    "^Fix All",
    "^Suppress or configure issues",
    "^Add braces",
    "^Use block body for method",
    "^Use explicit type instead of 'var'",
    "^Fix using Copilot",
    "^Explain using Copilot",
    "^Modify using Copilot",
    "^(Extract|Encapsulate|Foreach|Disable|Try|Else|More|Generate Equals|Replace)",
    "DebuggerDisplay",
    "^Generate constructor",
    "^Add parameters",
    "^Add optional parameters",
    "^Use expression body",
    "Use block body",
    "^Convert to"
  ],
  "csharpen.quickFixesToPerform": [
    "Collection initialization can be simplified$",
    "Convert to conditional expression",
    "Deconstruct variable declaration",
    "Make static",
    "Remove accessibility modifiers",
    "Remove Unnecessary Usings",
    "Simplify LINQ expression",
    "Simplify member access",
    "Use 'Count' check instead",
    "Use 'TryGetValue",
    "Use Length/Count property instead",
    "Use discard",
    "Use pattern matching",
    "Use simple 'using'",
    "use 'var' instead",
    "Use collection expression",
    "Use null propagation",
    "Rename to "
  ]
}
