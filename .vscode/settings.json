{
  // Ensure EditorConfig is enabled
  "editorconfig.generateAuto": false,
  // C# Dev Kit specific settings
  "dotnet.completion.showCompletionItemsFromUnimportedNamespaces": true,
  // Code analysis settings to enforce method body blocks and other rules
  "dotnet.codeAnalysis.analyzerSeverity": {
    "IDE0022": "warning", // Use block body for methods
    "IDE0025": "warning", // Use block body for properties
    "IDE0027": "warning", // Use block body for accessors
    "IDE0021": "warning", // Use block body for constructors
    "IDE0023": "warning", // Use block body for conversion operators
    "IDE0024": "warning", // Use block body for operators
    "IDE0160": "warning", // Convert to file-scoped namespace
    "IDE0044": "warning", // Add readonly modifier to private fields that are never assigned to
    "CA1707": "none" // Remove underscores from member names - suppressed for test methods
  },
  // // Enable code analysis for C# Dev Kit
  // "dotnet.codeLens.enableReferencesCodeLens": true,
  // "dotnet.inlayHints.enableInlayHintsForParameters": true,
  // "dotnet.inlayHints.enableInlayHintsForLiteralParameters": true,
  // "dotnet.inlayHints.enableInlayHintsForIndexerParameters": true,
  // "dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": true,
  // "dotnet.inlayHints.enableInlayHintsForOtherParameters": true,
  // "dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": true,
  // "dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": true,
  // "dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": true,
  // Ensure files.associations for .editorconfig
  "files.associations": {
    ".editorconfig": "ini"
  },
  // "editor.codeLens": false
  "csharpen.regionalizeInterfaceImplementations": [],
  "csharpen.namespaceLevelOrganization": {
    "ordering": [
      "type",
      "access",
      "name"
    ],
    "typeSort": [
      "delegate",
      "interface",
      "class",
      "enum",
      "struct",
      "record",
      "record struct"
    ],
    "regionalization": [],
    "regionThreshold": 5000,
    "doNotRegionalizeMembersOf": [
      "interface",
      "class",
      "struct",
      "record",
      "record struct"
    ],
    "onlyRegionalizeTypes": []
  },
  "csharpen.allowSharpenWithFileDiagnosticErrors": true,
  "csharpen.typeLevelOrganization": {
    "doNotRegionalizeTypes": [
      "delegate",
      "event",
      "constant",
      "property",
      "field",
      "static constructor",
      "constructor",
      "indexer",
      "finalizer",
      "method",
      "operator",
      "interface",
      "class",
      "enum",
      "struct",
      "record",
      "record struct"
    ],
    "ordering": [
      "type",
      "access",
      "name"
    ],
    "typeSort": [
      "delegate",
      "event",
      "constant",
      "property",
      "field",
      "static constructor",
      "constructor",
      "indexer",
      "finalizer",
      "method",
      "operator",
      "interface",
      "class",
      "enum",
      "struct",
      "record",
      "record struct"
    ],
    "regionalization": [
      "type"
    ],
    "regionThreshold": 500,
    "doNotRegionalizeMembersOf": [
      "interface"
    ],
    "onlyRegionalizeMembersOf": [
      "class"
    ],
    "onlyRegionalizeTypes": [
      "property",
      "field",
      "constant",
      "method"
    ]
  },
  "csharpen.codingStylesEnabled": true,
  "csharpen.symbolRenaming": [
    {
      "name": "AsyncMethodSuffix",
      "replacement": "{name}Async",
      "memberModifiers": "async",
      "namePattern": "^(?<name>[a-zA-Z][a-zA-Z0-9_]+(?<!Async))$",
      "returnTypePattern": "^(Value)?Task(<.*>)?$",
      "types": "method"
    },
    {
      "name": "InterfaceFormat",
      "replacement": "I{name:0-1:upper}{name:1}",
      "namePattern": "^(?<name>[^I][a-zA-Z0-9_]+)$",
      "types": "interface"
    },
    {
      "name": "PrivateConstOrFieldFormat",
      "replacement": "_{name:0-1:lower}{name:1}",
      "namePattern": "^(?<name>[a-zA-Z][a-zA-Z0-9_]+)$",
      "types": "constant,field",
      "accessModifiers": "private protected,private"
    },
    {
      "name": "NonPrivateMemberFormat",
      "replacement": "{name:0-1:upper}{name:1}",
      "namePattern": "^_*(?<name>[a-z][a-zA-Z0-9_]+)$",
      "types": "constant,field,method,property,enum,event,delegate",
      "accessModifiers": "!:private protected,private"
    }
  ],
  "csharpen.codingStyles": {
    "useLanguageKeywordsInsteadOfFrameworkTypes": true,
    "convertNonPrivateFieldsToProperties": true
  }
}
